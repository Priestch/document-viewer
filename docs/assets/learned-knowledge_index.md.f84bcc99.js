import{_ as e,c as t,o as a,Q as o}from"./chunks/framework.ce509e38.js";const b=JSON.parse('{"title":"Acknowledge","description":"","frontmatter":{},"headers":[],"relativePath":"learned-knowledge/index.md","filePath":"learned-knowledge/index.md","lastUpdated":1697192889000}'),r={name:"learned-knowledge/index.md"},s=o('<h1 id="acknowledge" tabindex="-1">Acknowledge <a class="header-anchor" href="#acknowledge" aria-label="Permalink to &quot;Acknowledge&quot;">​</a></h1><blockquote><p>There are critical comments about the PDF.js project, they say it should be easier to integrate the default viewer. I understand them somehow as a developer who want to show a PDF quickly, but knowing the primary goal of an OSS project can help us to understand the trade-off decisions made by the maintainers.</p><p>All these are what I learned from the PDF.js project. It may not be accurate, but I hope it can help you to understand the PDF.js better.</p></blockquote><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><h3 id="background-introduction" tabindex="-1">Background Introduction <a class="header-anchor" href="#background-introduction" aria-label="Permalink to &quot;Background Introduction&quot;">​</a></h3><p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noreferrer">PDF.js</a> is an OSS project supported by Mozilla and developed using HTML5, It&#39;s goal is to create a general-purpose, web standards-based platform for rendering PDFs in the <strong>Firefox browser</strong>. Many people find out that it&#39;s hard to integrate it into project, it&#39;s <a href="#issues-talked-about-why-it-s-hard-to-integrate">somehow intentionally</a>.</p><p>It&#39;s not developed as a component or library you can easily integrate like most npm packages, because it&#39;s primary goal is to be used easily in <strong>Firefox browser</strong>, the goal doesn&#39;t match most developers expectations. It&#39;s the trade-off decision made by the maintainers, we should respect it.</p><h3 id="issues-talked-about-why-it-s-not-easy-to-integrate" tabindex="-1">Issues talked about why it&#39;s not easy to integrate <a class="header-anchor" href="#issues-talked-about-why-it-s-not-easy-to-integrate" aria-label="Permalink to &quot;Issues talked about why it&#39;s not easy to integrate&quot;">​</a></h3><ul><li><a href="https://github.com/mozilla/pdf.js/issues/5609#issuecomment-68530552" target="_blank" rel="noreferrer">Issue 5609</a></li><li><a href="https://github.com/mozilla/pdf.js/issues/9210#issuecomment-347834276" target="_blank" rel="noreferrer">Issue 9210</a></li><li><a href="https://github.com/mozilla/pdf.js/issues/7203#issuecomment-210510569" target="_blank" rel="noreferrer">Issue 7203</a></li></ul><h2 id="the-terms" tabindex="-1">The Terms <a class="header-anchor" href="#the-terms" aria-label="Permalink to &quot;The Terms&quot;">​</a></h2><ul><li><a href="./app-options.html">AppOptions</a></li><li><a href="./application.html">PDFViewerApplication</a></li></ul>',10),n=[s];function i(l,d,h,c,u,p){return a(),t("div",null,n)}const f=e(r,[["render",i]]);export{b as __pageData,f as default};
