import{_ as e,c as t,o as a,Q as o}from"./chunks/framework.03d10376.js";const m=JSON.parse('{"title":"Acknowledge","description":"","frontmatter":{},"headers":[],"relativePath":"learned-knowledge/index.md","filePath":"learned-knowledge/index.md","lastUpdated":1698481890000}'),i={name:"learned-knowledge/index.md"},r=o('<h1 id="acknowledge" tabindex="-1">Acknowledge <a class="header-anchor" href="#acknowledge" aria-label="Permalink to &quot;Acknowledge&quot;">​</a></h1><blockquote><p>There are critical comments about the PDF.js project, they say it should be easier to integrate the default viewer. I understand them somehow as a developer who want to show a PDF quickly, but knowing the primary goal of an OSS project can help us to understand the trade-off decisions made by the maintainers.</p><p>All these are what I learned from the PDF.js project. It may not be accurate, but I hope it can help you to understand the PDF.js better.</p></blockquote><h1 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#background-introduction">Background Introduction</a></li><li><a href="#pdfviewerapplication">PDFViewerApplication</a></li><li><a href="#appoptions">AppOptions</a><ul><li><a href="#option-kinds">Option Kinds</a></li><li><a href="#important-options">Important options</a></li></ul></li><li><a href="#import-events">Import Events</a></li></ul></nav><h2 id="background-introduction" tabindex="-1">Background Introduction <a class="header-anchor" href="#background-introduction" aria-label="Permalink to &quot;Background Introduction&quot;">​</a></h2><p><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noreferrer">PDF.js</a> is an OSS project supported by Mozilla and developed using HTML5, It&#39;s goal is to create a general-purpose, web standards-based platform for rendering PDFs in the <strong>Firefox browser</strong>. Many people find out that it&#39;s hard to integrate it into project, it&#39;s <a href="#issues-talked-about-why-it-s-hard-to-integrate">somehow intentionally</a>.</p><p>It&#39;s not developed as a component or library you can easily integrate like most npm packages, because it&#39;s primary goal is to be used easily in <strong>Firefox browser</strong>, the goal doesn&#39;t match most developers expectations. It&#39;s the trade-off decision made by the maintainers, we should understand it.</p><h4 id="issues-talked-about-why-it-s-not-easy-to-integrate" tabindex="-1">Issues talked about why it&#39;s not easy to integrate <a class="header-anchor" href="#issues-talked-about-why-it-s-not-easy-to-integrate" aria-label="Permalink to &quot;Issues talked about why it&#39;s not easy to integrate&quot;">​</a></h4><ul><li><a href="https://github.com/mozilla/pdf.js/issues/5609#issuecomment-68530552" target="_blank" rel="noreferrer">Issue 5609</a></li><li><a href="https://github.com/mozilla/pdf.js/issues/9210#issuecomment-347834276" target="_blank" rel="noreferrer">Issue 9210</a></li><li><a href="https://github.com/mozilla/pdf.js/issues/7203#issuecomment-210510569" target="_blank" rel="noreferrer">Issue 7203</a></li></ul><h2 id="pdfviewerapplication" tabindex="-1">PDFViewerApplication <a class="header-anchor" href="#pdfviewerapplication" aria-label="Permalink to &quot;PDFViewerApplication&quot;">​</a></h2><p>The global <code>PDFViewerApplication</code> object is the entry of the default viewer of PDF.js, it glues all the modules together, and provides the API for the user.</p><h2 id="appoptions" tabindex="-1">AppOptions <a class="header-anchor" href="#appoptions" aria-label="Permalink to &quot;AppOptions&quot;">​</a></h2><p>There are dozens of times options in PDF.js, and they all belong to four kinds for now. You may wonder why there are so many options, and what they mean at the first time. This document will help you to understand them.</p><p>Let&#39;s crack on them one by one!</p><h3 id="option-kinds" tabindex="-1"><a href="https://github.com/mozilla/pdf.js/blob/34506f8874ce86ea21b9db54d0552947208bf4bb/web/app_options.js#L43" target="_blank" rel="noreferrer">Option Kinds</a> <a class="header-anchor" href="#option-kinds" aria-label="Permalink to &quot;[Option Kinds](https://github.com/mozilla/pdf.js/blob/34506f8874ce86ea21b9db54d0552947208bf4bb/web/app_options.js#L43)&quot;">​</a></h3><ul><li>VIEWER</li><li>API</li><li>WORKER</li><li>PREFERENCE</li></ul><h3 id="important-options" tabindex="-1">Important options <a class="header-anchor" href="#important-options" aria-label="Permalink to &quot;Important options&quot;">​</a></h3><ul><li><code>defaultUrl</code></li><li><code>locale</code></li><li><code>workerSrc</code></li><li><code>sandboxBundleSrc</code></li></ul><h4 id="defaulturl" tabindex="-1">defaultUrl <a class="header-anchor" href="#defaulturl" aria-label="Permalink to &quot;defaultUrl&quot;">​</a></h4><ul><li>Type <code>URL | string | Uint8Array</code></li></ul><p>The url of the PDF file. If you got <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer">CORS</a> issue when loading a PDF file from a different origin, see details at <a href="/document-viewer/docs/pitfalls.html#origin-not-match">origin match error</a> section in common pitfalls page .</p><h4 id="locale" tabindex="-1">locale <a class="header-anchor" href="#locale" aria-label="Permalink to &quot;locale&quot;">​</a></h4><ul><li>Type <code>string</code></li><li>Default <code>en-US</code></li></ul><p>The locale of the viewer, it easy to switch a different locale by setting this option. See all supported locales in folder <a href="https://github.com/mozilla/pdf.js/tree/master/l10n" target="_blank" rel="noreferrer">l10n</a>.</p><h2 id="import-events" tabindex="-1">Import Events <a class="header-anchor" href="#import-events" aria-label="Permalink to &quot;Import Events&quot;">​</a></h2><h4 id="documentinit" tabindex="-1"><code>documentinit</code> <a class="header-anchor" href="#documentinit" aria-label="Permalink to &quot;`documentinit`&quot;">​</a></h4>',26),n=[r];function l(s,d,h,c,p,u){return a(),t("div",null,n)}const b=e(i,[["render",l]]);export{m as __pageData,b as default};
